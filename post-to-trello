#!/usr/bin/env node

/*


Show card IDs bookmarklet for Trello

javascript:!function(){var o=$(".card-short-id");o.each(function(){$(this).text($(this).text().replace("","").replace("","").replace("N.ยบ ", ""))});o.hasClass("hide")?o.removeClass("hide").css({"font-weight":"normal","font-size":".9em","margin-right":"5px",padding:"2.3px 6px",background:$("body").css("background-color"),"border-radius":"10px",color:"#EE433E"}):o.addClass("hide")}();


# SCRIPT CONFIG:

### STEP 1 - get an app key:

https://trello.com/1/appKey/generate


### STEP 3 - get an app token using app key from step 1

https://trello.com/1/connect?key=<KEY_FROM_STEP_1>&name=git-hook&expiration=never&response_type=token&scope=read,write
(replace KEY_FROM_STEP_1 with an actual key)

### STEP 3 - get board ID:

append `.json` to any URL while inside the board and look for `id: "BOARD_ID",`

### STEP 4 replace
`key`, `token` and `board_id` with the values obtained in steps 1-3

replace `repo_link` with your repo root URL

**/

/*----------------------------------*/
/*          START CONFIG HERE       */

var key = "<REPLACE>";
var token = "<REPLACE>";
var repo_link = "<REPLACE>"
var board_id = "<REPLACE>"

/*            END CONFIG            */
/*----------------------------------*/


// ---------------------------------------  COLORS + ERR -----------------------------------------------------
var colors = require('colors');
colors.setTheme({
    input: 'grey',
    verbose: 'cyan',
    prompt: 'grey',
    info: 'green',
    help: 'cyan',
    warn: 'yellow',
    debug: 'blue',
    error: 'red'
});

function error(string) {
    console.log(string.error); // using the colors plugin
}

function info(string) {
    console.log(string.info); // using the colors plugin
}

function warn(string) {
    console.warn(string.warn); // using the colors plugin
}



// --------------------------------------------------------------------------------------------



var Trello = require("node-trello");
var t = new Trello(key, token);
var spawn = require('child_process').spawn;
var git = spawn('git', ['log', '-1', 'HEAD']);
var data = "";

git.stdout.on('data', function (d) {
    data += d;
});


git.on('exit', function () {
    var m = data.match(/(trello|card|close|archive|fix)e?s?\D?(\#?)([0-9]+)(.+)/i);
    if (m) {
        var commit = data.match(/commit\s+(.+)/i)[1];
        var author = data.match(/author:\s+([^<]+)/i)[1];
        var date = data.match(/date:\s+(.+)/i)[1];

        var verb = m[1].toLowerCase(); // action verb
        var card = m[3]; // card ID (numeric)
        var cmsg = m[4]; // commit message post the card action
        //get card

        get_card(board_id, card, function (err, cardData) {

            if (err) {
                warn("[ERROR] Cannot find card matching ID " + card);
                return;
            }

            var comment = 'Commit by : ' + author + '\nDate : ' + date + '\nCommit : ' + commit + '\nMessage : ' + cmsg;
            add_comment(cardData.id, comment, function (err, commentResponse) {
                if (err) {
                    throw err;
                } else {
                    //console.dir(data);
                    info('Card ' + cardData.name + ' updated');

                    if (cardData.closed) {
                        warn('Card is already closed');
                        return;
                    }

                    // Archive/Close the card if needed
                    if (verb === 'trello' || verb === 'card') {
                        return;
                    } else {
                        update_card(cardData.id, {
                            closed: true
                        }, function (err, updCardResponse) {
                            if (err) {
                                error('Card close operation failed');
                            }
                            if (updCardResponse.closed) {
                                info('Card closed: #' + card + ' --> ' + cardData.name);
                            } else {
                                error('Could not close card: ' + card);
                            }
                        });
                    }
                }
            });
        });

    } else {
        warn('No Trello mentions');
    }
});



function logfun(err, data) {
    if (err) throw err;
    info(data);
}

function get_card(board_id, card_id, fun) {
    fun = fun || logfun;
    t.get("/1/boards/" + board_id + "/cards/" + card_id, fun);
}

function update_card(card_id, params, fun) {
    fun = fun || logfun;
    t.put("/1/cards/" + card_id, params, fun);
}

function add_comment(card_id, comment, fun) {
    fun = fun || logfun;
    t.post("/1/card/" + card_id + "/actions/comments", {
        text: comment
    }, fun);
}

function get_cards(list_id, fun) {
    fun = fun || logfun;
    t.get("/1/lists/" + list_id + "/cards", {
        fields: "idList,closed,name"
    }, fun);
}
